version: "3.8"

networks:
  app_net:
    external: false
    name: app_net
  web_net:
    external: true
    name: web_net

volumes:
  mimir1_data:
    name: mimir1_data
  mimir2_data:
    name: mimir2_data
  mimir3_data:
    name: mimir3_data
  minio_data:
    name: minio_data
  grafana_data:
    name: grafana_data
  prometheus_data:
    name: prometheus_data

services:
  minio:
    image: quay.io/minio/minio:RELEASE.2023-08-16T20-17-30Z
    command: server --console-address ":9001" /data
    container_name: minio
    hostname: minio
    restart: ${RESTART_POLICY}
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: https://${MINIO_SUB2}.${DOMAIN_ADDRESS}
      MINIO_BROWSER_REDIRECT_URL: https://${MINIO_SUB1}.${DOMAIN_ADDRESS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - web_net
      - app_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web_net"
      - "traefik.http.routers.minio.entrypoints=http"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_SUB1}.${DOMAIN_ADDRESS}`)"
      - "traefik.http.routers.minio.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.minio-secure.entrypoints=https"
      - "traefik.http.routers.minio-secure.rule=Host(`${MINIO_SUB1}.${DOMAIN_ADDRESS}`)"
      - "traefik.http.routers.minio-secure.tls=true"
      - "traefik.http.routers.minio-secure.tls.options=default"
      - "traefik.http.routers.minio-secure.tls.certresolver=mycert"
      - "traefik.http.routers.minio-secure.service=minio"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-api.entrypoints=http"
      - "traefik.http.routers.minio-api.rule=Host(`${MINIO_SUB2}.${DOMAIN_ADDRESS}`)"
      - "traefik.http.routers.minio-api.middlewares=https-redirect"
      - "traefik.http.routers.minio-api-secure.entrypoints=https"
      - "traefik.http.routers.minio-api-secure.rule=Host(`${MINIO_SUB2}.${DOMAIN_ADDRESS}`)"
      - "traefik.http.routers.minio-api-secure.tls=true"
      - "traefik.http.routers.minio-api-secure.tls.options=default"
      - "traefik.http.routers.minio-api-secure.tls.certresolver=mycert"
      - "traefik.http.routers.minio-api-secure.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"

  grafana:
    image: grafana/grafana:10.1.5
    restart: ${RESTART_POLICY}
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SMTP_ENABLED=true
      - GF_INSTALL_PLUGINS=${GRAFANA_INSTALL_PLUGINS}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
    networks:
      - web_net
      - app_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.grafana.entrypoints=http
      - traefik.http.routers.grafana.rule=Host(`${GRASUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.grafana.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.grafana-secure.entrypoints=https
      - traefik.http.routers.grafana-secure.rule=Host(`${GRASUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.grafana-secure.tls=true
      - traefik.http.routers.grafana-secure.tls.options=default
      - traefik.http.routers.grafana-secure.tls.certresolver=mycert
      - traefik.http.services.grafana.loadbalancer.server.port=3000

  prometheus:
    image: prom/prometheus:v2.47.1
    restart: ${RESTART_POLICY}
    container_name: prometeheus
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=error
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=30d
      - --storage.tsdb.retention.size=150GB
      - --web.enable-lifecycle
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - web_net
      - app_net
    depends_on:
      mimir1:
        condition: service_healthy
      mimir2:
        condition: service_healthy
      mimir3:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.prometheus.entrypoints=http
      - traefik.http.routers.prometheus.rule=Host(`${PROSUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.prometheus.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.prometheus-secure.entrypoints=https
      - traefik.http.routers.prometheus-secure.rule=Host(`${PROSUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.prometheus-secure.tls=true
      - traefik.http.routers.prometheus-secure.tls.options=default
      - traefik.http.routers.prometheus-secure.middlewares=web-auth
      - traefik.http.routers.prometheus-secure.tls.certresolver=mycert
      - traefik.http.services.prometheus.loadbalancer.server.port=9090

  load-balancer:
    image: nginx:latest
    restart: ${RESTART_POLICY}
    container_name: load-balancer
    hostname: load-balancer
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      mimir1:
        condition: service_healthy
      mimir2:
        condition: service_healthy
      mimir3:
        condition: service_healthy
    networks:
      - app_net

  mimir1:
    image: grafana/mimir:2.10.2
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir1
    container_name: mimir1
    restart: ${RESTART_POLICY}
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - ./mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir1_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  mimir2:
    image: grafana/mimir:2.10.2
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir2
    container_name: mimir2
    restart: ${RESTART_POLICY}
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - ./mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir2_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  mimir3:
    image: grafana/mimir:2.10.2
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir3
    container_name: mimir3
    restart: ${RESTART_POLICY}
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - ./mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir3_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  cadvisor:
    image: docker.io/ahmadrafiee/cadvisor
    command: --disable_metrics=disk,udp,percpu
    restart: ${RESTART_POLICY}
    hostname: '${HOSTNAME}'
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_net

  node-exporter:
    image: prom/node-exporter:v1.6.1
    restart: ${RESTART_POLICY}
    hostname: '${HOSTNAME}'
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - app_net